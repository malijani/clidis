#!/usr/bin/env bash
#===============================================================================
#
#          FILE: clidis 
# 
#         USAGE: ./clidis 
# 
#   DESCRIPTION: start desktop environment in tty!
# 
#  REQUIREMENTS: being in tty! 
#         NOTES: add your desktop in startDesktop function and run it!
#        AUTHOR: VirtualDemon (VD) 
#       CREATED: 03/01/2019 12:38
#===============================================================================
# you can fork me and make me better from : https://github.com/virtualdemon/clidis
# licensed under GNU GENERAL PUBLIC LICENSE Version 3
# use the config file to set static and global variables to make script more compatible and functional
configPath="$HOME/.config/clidis/"
configFile="$HOME/.config/clidis/config"
if [ -e $configFile ] ; then
	source $configFile 2>&1 > /dev/null
else
	mkdir -p $configPath 2>&1 > /dev/null && touch $configFile 2>&1 > /dev/null
fi

# set colors
resetColor=$(tput sgr0)
boldText=$(tput bold)

#background main page 
sysPageColor="40"

# color name text desktop and .... 
InfoDesktop="36"

colorBtnSelection="34"

#item color ; info message
ItemColorSelect="32" 
# normal text color
[[ -z $normalTextColor ]] && normalTextColor=$(tput setaf 5)
# banner color
[[ -z $bannerTextColor ]] && bannerTextColor=$(tput setaf 6)
# important text color
[[ -z $importantTextColor ]] && importantTextColor=$(tput setaf 2)
# information text color
[[ -z $informationTextColor ]] && informationTextColor=$(tput setaf 6)

# set variables for system status
[[ -z $showStatus ]] && showStatus=1
[[ -z $showUserAtHost ]] && showUserAtHost=1
[[ -z $showLinuxVersion ]] && showLinuxVersion=1
[[ -z $showTime ]] && showTime=1
[[ -z $showLinuxDisName ]] && showLinuxDistName=1
[[ -z $showUptime ]] && showUptime=1

# don't run xinitrc by default
[[ -z $runXinitrc ]] && runXinitrc=0

#move cursor in terminal  
function gotoxy {
	printf "\33[%d;%df%s" "$2" "$1" "$3"
}
# clear page with color and background color changer 
function pageColor {
	w=$(tput cols)
	h=$(tput lines)
	printf "\e[%dm" "$1"
	if [[ "$2" == "clear" ]] ;then
		for y in  $( seq $h ); do
			for x in  $( seq $w ); do
				gotoxy "$x" "$y" " "
			done
		done
		gotoxy "0" "0" " "
	fi
}

# spaces function center text in space
function spaces  {
	txt="$1"
	num="$2"
	len=${#txt}
	len=$((len/2))
	offset=$((num-len))
	offset=$((offset/2))
	space=">"
	for (( i = 1; i < $offset; i++ )); do
		space=`echo "$space "`
	done
	
	space=`echo "${space}${txt}"`

	for (( i = 1; i < $offset; i++ )); do
		space=`echo "$space "`
	done
	space=`echo "$space<"`
	printf "%s" "$space"
}

# set location text in center spaces  
centerText (){
  pageColor "$sysPageColor"
  w=$(stty size | cut -d" " -f2)
  b=`echo $1|sed -e 's/\${.*}//g'`
  l=${#b} 
  printf "%"$((  ((w/2)+l) - (l/3) ))"s" "$1" 
}

# move cursor to new line 
newline(){

  echo ""
}


# function to print the text in the center of screen
function center {
	pageColor "$sysPageColor"
	termwidth="$(stty size | cut -d" " -f2)"
	padding="$(printf '%0.0000001s' ' '{1..500})"
	printf '%*.*s %s %*.*s\n' 0 "$(((termwidth-2-${#1})/2))" "$padding" "$1" 0 "$(((termwidth-1-${#1})/2))" "$padding"
}


# function to create a select menu from an array
# i didn't write this function! : https://unix.stackexchange.com/questions/146570/arrow-key-enter-menu -> Alexander Klimetschek
# Renders a text based list of options that can be selected by the
# user using up, down and enter keys and returns the chosen option.
#
#   Arguments   : list of options, maximum of 256
#                 "opt1" "opt2" ...
#   Return value: selected index (0 for opt1, 1 for opt2 ...)
function selectOption {
    # little helpers for terminal print control and key input
    ESC=$( printf "\033")
    cursor_blink_on()  { printf "$ESC[?25h"; }
    cursor_blink_off() { printf "$ESC[?25l"; }
    cursor_to()        { printf "$ESC[$1;${2:-1}H"; }
    print_selected() { 
    	text=$(spaces "$1"  "60")
		air=$(sed -e 's/[^ <>]/ /g' <<< $text)
    	center "         $ESC[7m$air$ESC[27m"; 
    	center "         $ESC[7m$text$ESC[27m"; 
    	center "         $ESC[7m$air$ESC[27m"; 
    }
    get_cursor_row()   { IFS=';' read -sdR -p $'\E[6n' ROW COL; echo ${ROW#*[}; }
    key_input()        { read -s -n3 key 2>/dev/null >&2
                         if [[ $key = $ESC[A ||
							   $key = $ESC[0A||
							   $key = $ESC[D ||
							   $key = $ESC[0D  ]]; then echo up;    fi

                         if [[ $key = $ESC[B 
                         	|| $key = $ESC[0B 
                            || $key = $ESC[C 
                            || $key = $ESC[0C ]]; then echo down;  fi

                         if [[ $key = ""     ]]; then echo enter; fi; }
    # initially print empty new lines (scroll down if at bottom of screen)
    for opt; do printf "\n"; done
    # determine current screen position for overwriting the options
    local lastrow=`get_cursor_row`
    local startrow=$(($lastrow - $#))
    # ensure cursor and input echoing back on upon a ctrl+c during read -s
    trap "cursor_blink_on; stty echo; printf '\n'; exit" 2
    cursor_blink_off
    stty -echo
    local selected=0
    while true; do
        # print options by overwriting the last lines
        local idx=0
        for opt; do
            if [ $idx -eq $selected ]; then

            	cursor_to $(($startrow))
				printf "\33[0;%dm" "$InfoDesktop"
            	center "You've selected : "$((selected+1))"/$#"
            	
            	cursor_to $(($startrow+2))
            	colorItemSelection=$(printf "\e[%dm" "$ItemColorSelect")
            	colorpage=$(printf "\e[0;%d;%dm" "$sysPageColor" "$InfoDesktop")
            	optionsInfo=$(echo -ne "\b\b{${options[*]}}" |sed 's/ / , /g' |sed 's/{/{ /g'|sed 's/}/ }/g')
		selectionItem=$(sed -e "s/ $opt /${boldText}${colorItemSelection}&${colorpage}/" <<< $optionsInfo)
            	centerText "${selectionItem}"
            	
            	cursor_to $(($startrow + 5))
       			printf "\33[%dm"  "$colorBtnSelection"
                print_selected "$opt"
       			printf "\33[0m"
            
            fi
            ((idx++))
        done
        # user key control
        case `key_input` in
            enter) break;;
            up)    ((selected--));
                   if [ $selected -lt 0 ]; then selected=$(($# - 1)); fi;;
            down)  ((selected++));
                   if [ $selected -ge $# ]; then selected=0; fi;;
        esac
    done
    # cursor position back to normal
    cursor_to $((lastrow+1))
    printf "\n"
    cursor_blink_on
    # return the selected index
    stty echo
    return $selected
}


# function to print system status
function systemStatus {
	if [[ $showStatus -eq 1 ]] ;then
		# start prining color
		echo "${informationTextColor}"
		# print user@host
		[[ $showUserAtHost -eq 1 ]] && center "$USER@$(uname -n)"
		# check kernel release
		[[ $showLinuxVersion -eq 1 ]] && center "$(uname -s -r)"
		# print time
		[[ $showTime -eq 1 ]] && center "time -> $(date +%H:%M)"
		if [[ $showLinuxDistName -eq 1 ]] ; then
			# check OS release version and name
			if [ -f /etc/os-release ]; then
	    			# freedesktop.org and systemd
	    			source /etc/os-release
	   			operatingSystem=$NAME
	   			operatingSystemVersion=$VERSION_ID
			elif type lsb_release >/dev/null 2>&1; then
				# linuxbase.org
				operatingSystem=$(lsb_release -si)
				operatingSystemVersion=$(lsb_release -sr)
			elif [ -f /etc/lsb-release ]; then
				# For some versions of Debian/Ubuntu without lsb_release command
				source /etc/lsb-release
				operatingSystem=$DISTRIB_ID
				operatingSystemVersion=$DISTRIB_RELEASE
			elif [ -f /etc/debian_version ]; then
				# Older Debian/Ubuntu/etc.
				operatingSystem=Debian
				operatingSystemVersion=$(cat /etc/debian_version)
			else
				# Fall back to uname, e.g. "Linux <version>", also works for BSD, etc.
				operatingSystem=$(uname -s)
				operatingSystemVersion=$(uname -r)
			fi
			center "$operatingSystem $operatingSystemVersion"
		fi
		# print uptime
		[[ $showUptime -eq 1 ]] && DIFF_SEC=$(($(date +%s)-$(date +%s -d "$(uptime -s)"))) && center "uptime -> $(($DIFF_SEC/3600)):$(($DIFF_SEC%3600/60))"
		# reset the color
		echo "${resetColor}"
	fi
}


# function to print banner
function printBanner {
	#clear and change background page 
	pageColor "$sysPageColor" "clear"

	echo -e "\n${boldText}${bannerTextColor}"
	center " ██████╗██╗     ██╗██████╗ ██╗███████╗"
	center "██╔════╝██║     ██║██╔══██╗██║██╔════╝"
	center "██║     ██║     ██║██║  ██║██║███████╗"
	center "██║     ██║     ██║██║  ██║██║╚════██║"
	center "╚██████╗███████╗██║██████╔╝██║███████║"
	center " ╚═════╝╚══════╝╚═╝╚═════╝ ╚═╝╚══════╝"
    echo "${resetColor}"	
    systemStatus
}


# function to start desktop environment
function startDesktop {
	if [[ $1 == "TTY" ]] ; then
		tput clear
		exec $SHELL
	elif [[ $1 == "reboot" ]] ; then
		tput clear
		echo "REBOOTING..."
		sleep 3
		reboot
	elif [[ $1 == "shutdown" ]] ; then
		tput clear
		echo  "SHUTTING DOWN..."
		sleep 3
		shutdown -h now
	fi
	# start chosen desktop environment from Exec command in .desktop file!
	echo "${normalTextColor}starting $1 ! please wait... ${resetColor}"
	execCommand=$(which $(grep "^Exec" /usr/share/xsessions/"$1".desktop | sed 's/Exec=//'))
	# for debian systems
	if [[ "$runXinitrc" == 1 ]] && [[ -e "$HOME/.xsession" ]] ; then
	    exec startx "$HOME/.xsession" "$execCommand" 2>&1 > /dev/null
	elif [[ "$runXinitrc" == 1 ]] && [[ -e "$HOME/.xinitrc" ]] ; then
	    exec startx "$HOME/.xinitrc" "$execCommand" 2>&1 > /dev/null
	fi
	exec startx "$execCommand" 2>&1 > /dev/null
}


# function to search in array elements
function containsElement {
  local e match="$1"
  shift
  for e; do [[ "$e" == "$match" ]] && return 0; done
  return 1
}

# function to create the menu list entries and configure them with config file
function menuEntries {
	# manual for user 
	centerText "${normalTextColor} Select an entry using ${importantTextColor} up/down ${normalTextColor} or ${importantTextColor} left/right ${normalTextColor} keys and ${importantTextColor}enter${normalTextColor} to confirm: ${resetColor}" 
	newline
	newline
	# get all installed graphical evironments
	desktops=$(ls /usr/share/xsessions/ | sed 's/.desktop//g')
	staticEntries=("TTY" "reboot" "shutdown")
	# create an array for user choice
	if [[ ! -z $lastUserChoice ]] ; then
		# convert string to temporary array 
		tempArray=($desktops)
		# delete the last user selection from temp array
		desktopsUpdate=( "${tempArray[@]/$lastUserChoice}" )
		# set the first element to last user choice
		options=("$lastUserChoice" ${desktopsUpdate[@]} ${staticEntries[@]})
	else
		# set the options array as default
		options=($desktops ${staticEntries[@]})
	fi
	# create select menu from options
	selectOption "${options[@]}"
	# set the user choice
	choice=$?
	newUserChoice=${options[$choice]}
	# set user choice to use next time : 
	containsElement $newUserChoice ${staticEntries[@]} 
	if [ $? -eq 1 ] ;then	
		if [[ $(grep "^lastUserChoice=" $configFile) ]] ; then
			sed -i "s/lastUserChoice=\"$lastUserChoice\"/lastUserChoice=\"$newUserChoice\"/" $configFile
		elif [[ $(grep "^#lastUserChoice=" $configFile) ]] ; then
			sed -i '/#lastUserChoice/d' $configFile
			echo -e "lastUserChoice=\"$newUserChoice\"" >> $configFile
		else
			echo -e "lastUserChoice=\"$newUserChoice\"" >> $configFile
		fi
	fi

}


# function to download clidis
function downloadClidis {
  # check internet connection
        if [[ "$(ping -c4 8.8.8.8 2>&1 > /dev/null )" ]]; then
                echo "Please check the internet connection"
                exit -1
        else
                echo "downloading clidis into $HOME/.clidis"
        fi
        # download clidis in $HOME/.clidis
        if [ $(which curl) ] ; then
                curl -s https://raw.githubusercontent.com/virtualdemon/clidis/master/clidis -o $HOME/.clidis 
        elif [ $(which wget ) ] ; then
                wget --quiet https://raw.githubusercontent.com/virtualdemon/clidis/master/clidis -O $HOME/.clidis
        fi

}


# function to install clidis
function installClidis {
	# if clidis exist in working directory ask to download
	if [[ -e "$(pwd)/clidis" ]] ; then
		while true; do
                        read -p "clidis exists in the current working directory! Do you want to download the latest version of clidis? [y/n] " yesOrNo
                        case $yesOrNo in
                                [Yy]* ) echo "Downloading the latest version of clidis from github..." && downloadClidis && break
                                ;;
				[Nn]* ) echo "Copying clidis to $HOME/.clidis" && cp "$(pwd)/clidis" $HOME/.clidis && break
                                ;;
                                * ) echo "Please answer yes or no."
                                ;;
                        esac
                done
	else
		downloadClidis
	fi
	chmod +x $HOME/.clidis
	# disable current display manager and set systemDefaultDisplayManager var in config file to use for uninstallation section
	if [ $(systemctl is-enabled display-manager) ]; then
		echo "disabling display manager service"
		systemDefaultDisplayManager=$(file /etc/systemd/system/display-manager.service |  sed 's:.*/::') 
		echo "systemDefaultDisplayManager=$systemDefaultDisplayManager" >> $configFile
		sudo systemctl disable display-manager.service
	else
	        # systemctl can't find a display manager on the system
		while true; do
			read -p "I didn't find any display manager working on your system (maybe it's already disabled)! Do you wish to install clidis script? [y/n] " yesOrNo
    			case $yesOrNo in
        			[Yy]* ) echo "continuing..." ; break
				;;
        			[Nn]* ) echo "quiting" ; exit
				;;
        			* ) echo "Please answer yes or no."
				;;
    			esac
		done
	fi
	# enable clidis after login	
	clidisAutoStartCommand="exec bash $HOME/.clidis"
	if [[ $(echo $SHELL | grep bash) ]] ;then 
		[[ ! -e "$HOME/.bash_profile" ]] && touch $HOME/.bash_profile
		if [[ ! $(grep "$clidisAutoStartCommand"  $HOME/.bash_profile 2>&1 > /dev/null) ]] ; then
			echo "$clidisAutoStartCommand" >> $HOME/.bash_profile 
		else
			echo "clidis is already enabled in $HOME/.bash_profile !"
			exit -1
		fi
	elif [[ $(echo $SHELL | grep zsh) ]] ; then
		[[ ! -e "$HOME/.zprofile" ]] && touch $HOME/.zprofile
		if [[ ! $(grep "$clidisAutoStartCommand" $HOME/.zprofile 2>&1 > /dev/null) ]] ; then
		       	echo "$clidisAutoStartCommand" >> $HOME/.zprofile 
		else
			echo "clidis is already enabled in $HOME/.zprofile !"
			exit -1
		fi
	elif [[ $(echo $SHELL | grep fish) ]] ; then
		[[ ! -e "$HOME/.config/fish/config.fish" ]] && touch $HOME/.config/fish/config.fish
	        if [[ ! $(grep "$clidisAutoStartCommand" $HOME/.config/fish/config.fish) ]] ; then 
		       	echo -e "if status --is-login\n\t$clidisAutoStartCommand\nend" >> $HOME/.config/fish/config.fish
	       else
		       	echo "clidis is already enabled in $HOME/.config/fish/config.fish !"
	       		exit -1
	       fi
        else
		read -p "Please give me your login shell profile path : " loginShellProfilePath
	        echo $clidisAutoStartCommand >> $loginShellProfilePath
       	fi
       	echo "done! please reboot your system to see what happened!"
	exit
}


# function to uninstall clidis
function uninstallClidis {
	# remove config path
	echo "removing $configPath"
	rm -rf $configPath 2>&1 > /dev/null
	# check the systemDefault display manager and use it 
	if [[ ! -z $systemDefaultDisplayManager ]] ; then 
		if [ ! $(systemctl is-enabled display-manager 2> /dev/null) ] ; then
			echo "enabling $systemDefaultDisplayManager ! please confirm root access!"
			sudo systemctl enable $systemDefaultDisplayManager
			echo "$systemDefaultDisplayManager is enabled now"
		else
			echo "There's a problem! your display manager is enabled! please check it : systemctl status display-manager.service"
		fi
	else
		echo "I don't know your display manager service name! maybe your installed clidis manually so you can't remove it automatically... just give me your display manger name : "
		while true ; do
			read -p "Please type your installed display manager name (lightdm, ssdm, gdm,...) : " displayManager
			if [ $(which $displayManager) ] ; then
				sudo systemctl enable $displayManager
				echo "$displayManager is enabled now."
				break
			else
				echo "The $displayManger doesn't exist on your system. please try again."
				sleep 5
				clear
			fi
		done
	fi
	# disable clidis after login
	clidisAutoStartCommand="exec bash $HOME/.clidis"
	if [[ $(echo $SHELL | grep bash) ]] ; then
	       [[ ! -e "$HOME/.bash_profile" ]] && touch $HOME/.bash_profile
		if [[ $(grep "$clidisAutoStartCommand"  $HOME/.bash_profile) ]] ; then
		       sed -i.bak "/clidis/d" $HOME/.bash_profile
	       else
		       echo "clidis isn't enabled in $HOME/.bash_profile !"
	       fi
	elif [[ $(echo $SHELL | grep zsh) ]] ; then
		[[ ! -e "$HOME/.zprofile" ]] && touch $HOME/.zprofile
		if [[ $(grep "$clidisAutoStartCommand"  $HOME/.zprofile) ]] ; then
			sed -i.bak "/clidis/d" $HOME/.zprofile 
		else
			echo "clidis isn't enabled in $HOME/.zprofile !"
		fi
	elif [[ $(echo $SHELL | grep fish) ]] ; then
		[[ ! -e "$HOME/.config/fish/config.fish" ]] && touch $HOME/.config/fish/config.fish
	       	if [[ $(grep "$clidisAutoStartCommand"  $HOME/.config/fish/config.fish) ]] ; then
		       	sed -i.bak "/clidis/d" $HOME/.config/fish/config.fish 
		else
			echo "clidis isn't enabled in $HOME/.config/fish/config.fish !"
		fi
	else
		while true ; do
			read -p "Please give me your login shell profile path : " loginShellProfilePath
			if [ -f $loginShellProfilePath ] ; then
				sed -i.bak "/clidis/d" $loginShellProfilePath
				break
			fi
		done
	fi
	echo "done! please reboot your system to see what happened!"
	exit
}


# install clidis if there's a -i or --install agument
if [[ ! -z $1 && $1 = @(-i|--install) ]] ; then
	# reset the terminal
	tput reset
	# install it!
	installClidis
fi


# uninstall clidis if there's a -u or --uninstall argument
if [[ ! -z $1 && $1 = @(-u|--uninstall) ]] ; then
	# reset the terminal
	tput reset
	# uninstall it!
	uninstallClidis
fi


# Test clidis to see what it looks like if there's a -t or --test-mode argument
if [[ ! -z $1 && $1 == @(-t|--test-mode) ]] ; then
        # reset the terminal
        tput reset
        # print the script banner
        printBanner
        # show the menu entries for user        
        menuEntries
        # pass the desktop name or selected options to startDesktop function
        #echo "selected ${options[$choice]}"
        center " you selected \"${options[$choice]}\" item"
        #clear and change background page 
		pageColor "$sysPageColor" "clear"
	exit
fi


# main commands
if [[ ! $DISPLAY && $XDG_VTNR -eq 1 ]] ; then
	# reset the terminal
	tput reset
	# print the script banner
	printBanner
	# show the menu entries for user	
	menuEntries
	# pass the desktop name or selected options to startDesktop function
	#echo "selected ${options[$choice]}"
	startDesktop ${options[$choice]}
else
	echo "Error : Another Xserver is running!, Abort."
	exit -1
fi

